
# PCL 2 Exercise 3: JSON converter

## Introduction
In this exercise, you will develop a JSON converter to process a large JSON file, selectively writing parts of its contents to an XML file in a memory-efficient manner. The objective is to handle large data without overloading system memory, ensuring your application performs optimally under constraints.

## Exercise Tasks

### Part A (2 points)

1. **Convert JSON to XML**: Implement the `converter.py` script to sequentially process the JSON files and convert the reviews to XML format. Each XML-review must adhere to the following format:

```xml
<review>
  <review_id>OAhBYw8IQ6wlfw1owXWRWw</review_id>
  <user_id>1C2lxzUo1Hyye4RFIXly3g</user_id>
  <business_id>BVndHaLihEYbr76Z0CMEGw</business_id>
  <ratings stars="5.0" useful="0" funny="0" cool="0"/>
  <text>Great place for breakfast! I had the waffle, which was fluffy and perfect, and home fries which were nice and smashed and crunchy. Friendly waitstaff. Will definitely be back!</text>
  <date year="2014" month="10" day="11" weekday="Saturday"/>
</review>
```

2. **Filter out weekdays**: Only include reviews in the output that have been posted on a Weekend (Saturday or Sunday).

3. **Command line interface**: Add a CLI so your script can be called from the command line. Your script must be callable with the following arguments:

```bash
python converter.py --json_file review_large.json --xml <your_filename.xml>
```

4. **Statistics**: Count the number of reviews you read from the JSON file and the number of reviews you wrote to the XML file.
Use the `logging` library to log these numbers. Your log should look similar to this:
```txt
INFO:root:Processed 3214654 reviews from file review_large.json
INFO:root:Written 1237524 reviews to reviews_converted.xml
```

**Hints:** 
- You only need to iterate over the JSON file once.
- Use appropriate libraries for sequential processing (for reading **and** writing files) as discussed in the lecture. **Never** write an XML file without using an XML library (like in the bad example on page 73 of Lecture 8 (Text Encoding)).
- Test your solution on the small file first (`review.json`). Compare the output with the provided sample file (`review.xml`) to see if your implementation is correct. Then use the large file (`review_large.json`) to check if your solution is memory efficient.
- Use a memory profiler or your systemâ€™s task manager to monitor the memory usage of the python process. It's possible to achieve this task with less than 20MiB of memory. If your memory usage is significantly higher, or you observe sudden memory spikes, it's likely that your code is not optimized enough.

### Part B (1 point) (this will be covered in the lecture on May 15th 2024)

1. Extend your script and implement the **Reservoir Sampling** algorithm. Refactor your code so the reviews that were posted on a weekend are randomly split into a training set and test set as you are iterating over the JSON input file. Adapt the script so the converted reviews are written to two files: `--xml_train` and `--xml_test`. 

2. Add the following arguments to the CLI:
    - `--xml_test`: The output file for the test set in xml format.
    - `-n`: The number of items in the reservoir. These are the reviews that will be written to `--xml_test`.
    - Rename the argument `--xml` to `--xml_train`. This is the output file for the train set in xml format.

3. Update the logging: The number of reviews read from the JSON file, the number of reviews written to the test xml and number of reviews written to the train xml must be logged. Your log should look similar to this:
```txt
INFO:root:Processed 3214654 reviews from file review_large.json
INFO:root:Written 1234524 reviews to train.xml
INFO:root:Written 3000 test reviews to xml test.xml
```

**Hints:** 
- You still only need to iterate over the file once. The memory requirement should not increase significantly (for small values of `-n`). For example, we used less than 35 MiB with a reservoir size of 3000.
- Make sure the sum of the number of reviews in `--xml_train` and `--xml_test` is the same as the number of reviews that you wrote to the xml file in task A. No review should appear in both xml-files.
- If you set the reservoir size to 0 (`-n`) the `--xml_train` file should look identical to the xml file generated in task A.


